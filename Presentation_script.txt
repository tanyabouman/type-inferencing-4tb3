Slide 1
E: Hi I’m Emily!
Ta: I’m Tanya!
To: And I’m Tonye!
E: Today we’re going to talk about Type Inferencing in functional languages.

Slide 2
E: We've all seen a line of code like this many times over in languages like Java or c++. When we have type inferencing though, we don't need to declare x or y as an int. The program does it for us. Type inferencing is a common feature, paricularly in functional languages. You can see it in languages like Haskell, Swift, and more.

Slide 3
To: We're working with a toy language which is similar to Haskell. For our language rules we are going to consider an abstract syntax with just expression, no statements. Our expressions are...

Slides 4 & 5
Ta: Evaluation rules explantions.  
Each of these rules corresponds to one of the possibilities for an expression.
The first one corresponds to a constant literal.  The type of a constant literal is just whatever type is indicated by the literal.
So if the literal is a number, then in our language, the type must be an integer.  If the literal is a string, then it's a string.

The next one corresponds to a variable expression.  In order to know what 
the type of a variable is, we look it up in the surrounding context to see
what it previous definitions made it.  Then we have to compare the previous
definitions to whatever the immediate context of the variable is now telling
us.  Perhaps it is an argument to a function.  The input type of the 
function must the type of the variable.

Then we have the function and function application expressions.  
This is where inferencing gets really interesting.  In the case of the
function, we need to check that its implied type from surrounding context,
whether a type signature or something else, is in fact a function type.
Then we check the body of the expression for its type and match it up with
the argument type.

The application of the function requires that the first expression actually
be a function, and that the input type of the function matches the argument
given.  Additionally, the whole expression must match its context.

Slide 6
To: For our project we condidered two basic algorithms for implementing type inferencing. Normally in type inferencing, the language uses algorithm W to infer the types, however there is another to consider, algorithm M. The difference between the algorithms is that they are essentially the inverse of each other. This includes in approach, number of expressions, and in name.

Slide 7
E: We plan to work with algorithm M as it is the less explored option.

Slide 8
E: And now for a short demonstartion.

Slide 9
E: The End!
